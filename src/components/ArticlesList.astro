---
import ArticleCard from "./ArticleCard.astro";

interface Article {
  frontmatter: {
    title: string;
    excerpt?: string;
  };
  url: string;
}



function getRandomRgbColor() {
  const red = Math.floor(180 + Math.random() * 255);
  const green = Math.floor(180 + Math.random() * 255);
  const blue = Math.floor(180 + Math.random() * 255);
  return `rgb(${red},${green},${blue})`;
}


// const articles = await Astro.glob("../pages/articles/*.md");
const { articles } = Astro.props as { articles: Article[] };
const articlesColors = articles ? articles.map(() => getRandomRgbColor()): [];
---

<div class="flex flex-col items-center justify-between w-11/12">
  <div class="article-card-list w-11/12 h-3/4">
    {
      articles?.map((article, index) => (
        <div class="px-4 py-2">
          <ArticleCard
            title={article.frontmatter.title}
            excerpt={article.frontmatter.excerpt}
            slug={article.url}
            cardColor={articlesColors[index]}
          />
        </div>
      ))
      ?? <p>There is no articles</p>
    }
  </div>
</div>

<style>
  .article-card-list {
    display: flex;
    align-items: center;
    overflow-x: auto;
    overflow-y: hidden;
  }

  .article-card-list::-webkit-scrollbar {
    height: 0px;
  }
  .article-card-list::-webkit-scrollbar-track {
    background: transparent;
  }
  .article-card-list::-webkit-scrollbar-thumb {
    background: transparent;
    border-radius: 15px;
  }
  .article-card-list::-webkit-scrollbar-thumb:hover {
    background: transparent;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', (event: Event) => {
    const scrollContainer = document.querySelector('.article-card-list') as HTMLElement;

    let isDown: boolean = false;
    let startX: number;
    let scrollLeft: number;

    scrollContainer.addEventListener('mousedown', (e: MouseEvent) => {
      isDown = true;
      scrollContainer.classList.add('active');
      startX = e.pageX - scrollContainer.offsetLeft;
      scrollLeft = scrollContainer.scrollLeft;
    });

    scrollContainer.addEventListener('mouseleave', () => {
      isDown = false;
      scrollContainer.classList.remove('active');
    });

    scrollContainer.addEventListener('mouseup', () => {
      isDown = false;
      scrollContainer.classList.remove('active');
    });

    scrollContainer.addEventListener('mousemove', (e: MouseEvent) => {
      if (!isDown) return;
      e.preventDefault();
      const x = e.pageX - scrollContainer.offsetLeft;
      const walk: number = (x - startX) * 3; // Умножитель для ускорения прокрутки
      scrollContainer.scrollLeft = scrollLeft - walk;
    });
  });
</script>